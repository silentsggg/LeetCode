class Solution:
    # 三指针解法，三个指针：f，s，t，列表排序
    # f指针遍历列表第一个元素到倒数第三个元素
    # s指针位于f指针右侧，t指针位于列表最右端
    # 计算sum(f,s,t)-target，与ans-target比较，如果小于ans，则替换ans；初始ans可以使用列表前三个元素的和
    # 然后sum（f,s,t)与target比较，如果小于target，则s指针右移；如果大于target，则t指针左移；如果等于则直接返回sum
    # 如果s，t指针重合，则s左移，t回到最右，继续重复上面的步骤
    # 时间复杂度：排序，O(mlogn);三数和O(n²),时间复杂度不计算小的那项，所以为O(n²)

    def threeSumClosest(self, nums: list[int], target: int) -> int:
        length = len(nums)
        nums.sort()
        ans = nums[0] + nums[1] + nums[2]

        # f指针位于列表第一个元素到倒数第三个元素
        for f in range(length - 2):

            s = f + 1
            t = length - 1

            while s < t:
                sumx = nums[f] + nums[s] + nums[t]
                if abs(sumx - target) < abs(ans - target):
                    ans = sumx
                if sumx == target:
                    return sumx
                if sumx > target:
                    t -= 1
                if sumx < target:
                    s += 1

        return ans

    # # 个人算法，LeetCode运行超时
    # def threeSumClosest(self, nums: list[int], target: int) -> int:
    #     length = len(nums)
    #     nums.sort()
    #     sumx = nums[-1] + nums[-2] + nums[-3]
    #     sumprev = sumx
    #     ans = sumx
    #     # 如果初始和就大于等于target，那么就返回初始，因为后面会更大
    #     # if sumx >= target:
    #     #     return sumx

    #     for first in range(length - 2):
    #         for second in range(first + 1, length - 1):
    #             for third in range(second+1, length):
    #                 sumx = nums[first] + nums[second] + nums[third]
    #                 if sumx == target:
    #                     return sumx
    #                 if sumx < target:
    #                     sumprev = sumx
    #                     continue
    #                 if sumx > target:
    #                     if abs(sumx - target) < abs(sumprev - target):
    #                         temp = sumx
    #                     else:
    #                         temp = sumprev

    #                     if abs(temp - target) < abs(ans - target):
    #                         ans = temp

    #     return ans


if __name__ == '__main__':
    s1 = Solution()
    lst1 = [-1, 2, 1, -4]
    lst2 = [-23, -67, 32, 21, -65, 46, 73, 42, 93, 9, -61, -79, -51, 61, -15, 49, 92, -34, 50, 1, 26, -12, 68, -97, -17,
            51, -55, 75, -56, -95, -70, -42, 91, -18, -64, 20, 33, -20, 19, 61, -89, 81, -73, 82, -23, -65, 51, -88, 15,
            -48, 24, 34, 0, -24, 37, 22, 28, -67, -25, -61, -57, -74, 65, 50, -66, 24, 99, 80, 44, 85, 20, -4, -9, -81,
            87, -82, -100, 51, -83, 9, -31, 37, 23, -61, 53, -14, -51, 88, 56, 27, 42, -52, -97, 37, 36, -59, -45, 95,
            46, -1, -100, -38, 66, 44, 27, -97, 12, -43, 84, -53, 93, 18, -40, -38, 34, 85, 53, -50, -14, -6, 98, -77,
            -17, 50, -65, 52, -46, -94, 49, 72, -2, -82, 45, -39, -58, 67, 82, 63, 95, -32, 47, 15, -20, 46, 5, 17, -40,
            -95, 97, -9, 11, 8, -51, -24, -50, -37, -72, -57, 26, 26, 19, 71, -42]
    lst3 = [1, 1, 1, 0]
    lst4 = [745, 912, -435, 435, -290, 857, 354, 927, -768, 409, -450, 13, -508, 589, 415, -383, -903, 921, -641, 532,
            36, -614, -522, -417, 631, -601, 452, -846, -788, -115, 264, 840, 820, -284, 699, 860, 96, -453, 165, -443,
            973, 552, -228, 453, 478, -139, 888, 667, 249, 31, 346, -915, -431, -874, -449, -471, -833, -599, -929,
            -295, -971, 77, 536, 393, -43, 321, 404, -310, 698, -657, 615, -801, -973, -870, -569, 953, -133, -827, 451,
            -101, -707, 72, -862, -317, 633, -120, 722, 262, -493, 204, -515, -325, -628, 6, 84, 577, 923, 11, -191,
            636, 733, 379, 494, 867, 535, -797, 345, -564, 673, -237, 847, -368, -873, 694, 186, -635, 364, 714, -790,
            -719, -152, 106, -679, -812, 233, -253, 498, -59, -868, -786, 0, -146, -486, -995, 470, -207, 341, -690,
            977, -796, 757, 878, -90, -72, -214, -451, -106, -795, -180, 403, -255, 493, 467, -459, 623, 762, -192,
            -271, -463, 259, 967, 725, 884, -250, 610, 377, 763, -61, 358, 664, 987, 122, -482, -87, 109, 658, -366,
            1000, -63, -902, -96, 316, -742, 516, -287, -716, 719, -959, -683, -787, 662, -653, -779, 868, 635, 151,
            -343, 496, 230, 591, -944, -404, -448, -773, -772, -326, -76, -335, 821, -839, -875, -765, -703, -91, -542,
            -48, 876, -381, 396, -520, -134, -747, 444, -487, 731, -596, -78, -872, 256, -82, -578, 601, 528, 894, -771,
            -852, 400, 796, -495, 147, 571, -849, -674, -880, -892, 218, 803, 966, 909, -142, 226, 370, -401, 223, 229,
            -810, 741, -93, -755, 399, 448, 629, 547, -568, 593, 193, -603, 960, -282, 555, 241, 449, 572, 832, 56,
            -584, -618, -921, 158, 607, -693, 802, -842, -24, 886, 397, -362, 98, -727, 344, 287, -378, -476, 508, -838,
            -480, -580, 979, 418, -103, -332, -737, 254, 713, -642, -551, -649, -162, -590, 950, -173, -218]
    print(s1.threeSumClosest(lst4, -8329))
